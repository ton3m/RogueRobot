public static class EntityExtensionGenerated
{
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> GetMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection);
public static System.Boolean TryGetMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed);
public static System.Boolean TryGetMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetMoveCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveCondition);
public static System.Boolean TryGetMoveCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsMoving(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMoving, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsMoving(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMoving, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsMoving(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMoving);
public static System.Boolean TryGetIsMoving(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMoving, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> GetRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection);
public static System.Boolean TryGetRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed);
public static System.Boolean TryGetRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetRotationCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationCondition);
public static System.Boolean TryGetRotationCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddSelfTriggerDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddSelfTriggerDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetSelfTriggerDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage);
public static System.Boolean TryGetSelfTriggerDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddSelfTriggerReciever(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerReciever, value);
public static Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever GetSelfTriggerReciever(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerReciever);
public static System.Boolean TryGetSelfTriggerReciever(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever value) => entity.TryGetValue<Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerReciever, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddCharacterController(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.CharacterController value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CharacterController, value);
public static UnityEngine.CharacterController GetCharacterController(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.CharacterController>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CharacterController);
public static System.Boolean TryGetCharacterController(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.CharacterController value) => entity.TryGetValue<UnityEngine.CharacterController>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CharacterController, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTransform(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.Transform value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Transform, value);
public static UnityEngine.Transform GetTransform(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Transform);
public static System.Boolean TryGetTransform(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.Transform value) => entity.TryGetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Transform, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Health, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Health, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Health);
public static System.Boolean TryGetHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Health, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMaxHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MaxHealth, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMaxHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MaxHealth, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetMaxHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MaxHealth);
public static System.Boolean TryGetMaxHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MaxHealth, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageRequest(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageRequest(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> GetTakeDamageRequest(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest);
public static System.Boolean TryGetTakeDamageRequest(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> GetTakeDamageEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent);
public static System.Boolean TryGetTakeDamageEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetTakeDamageCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageCondition);
public static System.Boolean TryGetTakeDamageCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsDead(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDead, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsDead(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDead, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsDead(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDead);
public static System.Boolean TryGetIsDead(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDead, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsDeathProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsDeathProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsDeathProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess);
public static System.Boolean TryGetIsDeathProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddDeathCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DeathCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetDeathCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DeathCondition);
public static System.Boolean TryGetDeathCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DeathCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddSelfDestroyCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfDestroyCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetSelfDestroyCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfDestroyCondition);
public static System.Boolean TryGetSelfDestroyCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfDestroyCondition, out value);
}
