public static class EntityExtensionGenerated
{
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> GetMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection);
public static System.Boolean TryGetMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed);
public static System.Boolean TryGetMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> GetRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection);
public static System.Boolean TryGetRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed);
public static System.Boolean TryGetRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddCharacterController(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.CharacterController value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CharacterController, value);
public static UnityEngine.CharacterController GetCharacterController(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.CharacterController>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CharacterController);
public static System.Boolean TryGetCharacterController(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.CharacterController value) => entity.TryGetValue<UnityEngine.CharacterController>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CharacterController, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTransform(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.Transform value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Transform, value);
public static UnityEngine.Transform GetTransform(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Transform);
public static System.Boolean TryGetTransform(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.Transform value) => entity.TryGetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Transform, out value);
}
