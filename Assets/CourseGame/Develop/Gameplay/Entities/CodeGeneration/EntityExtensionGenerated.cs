public static class EntityExtensionGenerated
{
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> GetMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection);
public static System.Boolean TryGetMoveDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed);
public static System.Boolean TryGetMoveSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMoveCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetMoveCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveCondition);
public static System.Boolean TryGetMoveCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MoveCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsMoving(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMoving, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsMoving(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMoving, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsMoving(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMoving);
public static System.Boolean TryGetIsMoving(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMoving, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> GetRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection);
public static System.Boolean TryGetRotationDirection(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed);
public static System.Boolean TryGetRotationSpeed(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRotationCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetRotationCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationCondition);
public static System.Boolean TryGetRotationCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.RotationCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddSelfTriggerDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddSelfTriggerDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetSelfTriggerDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage);
public static System.Boolean TryGetSelfTriggerDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddSelfTriggerReciever(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerReciever, value);
public static Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever GetSelfTriggerReciever(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerReciever);
public static System.Boolean TryGetSelfTriggerReciever(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever value) => entity.TryGetValue<Assets.CourseGame.Develop.Gameplay.AI.Sensors.TriggerReciever>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerReciever, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddCharacterController(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.CharacterController value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CharacterController, value);
public static UnityEngine.CharacterController GetCharacterController(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.CharacterController>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CharacterController);
public static System.Boolean TryGetCharacterController(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.CharacterController value) => entity.TryGetValue<UnityEngine.CharacterController>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CharacterController, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTransform(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.Transform value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Transform, value);
public static UnityEngine.Transform GetTransform(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Transform);
public static System.Boolean TryGetTransform(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.Transform value) => entity.TryGetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Transform, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddRigidbody(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.Rigidbody value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Rigidbody, value);
public static UnityEngine.Rigidbody GetRigidbody(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.Rigidbody>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Rigidbody);
public static System.Boolean TryGetRigidbody(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.Rigidbody value) => entity.TryGetValue<UnityEngine.Rigidbody>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Rigidbody, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddShootPoint(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.Transform value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.ShootPoint, value);
public static UnityEngine.Transform GetShootPoint(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.ShootPoint);
public static System.Boolean TryGetShootPoint(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.Transform value) => entity.TryGetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.ShootPoint, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddAttackTrigger(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackTrigger, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddAttackTrigger(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackTrigger, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent GetAttackTrigger(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackTrigger);
public static System.Boolean TryGetAttackTrigger(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackTrigger, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddAttackCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetAttackCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCondition);
public static System.Boolean TryGetAttackCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsAttackProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsAttackProcess, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsAttackProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsAttackProcess, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsAttackProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsAttackProcess);
public static System.Boolean TryGetIsAttackProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsAttackProcess, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddAttackCanceledCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCanceledCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetAttackCanceledCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCanceledCondition);
public static System.Boolean TryGetAttackCanceledCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCanceledCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddInstantAttackEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.InstantAttackEvent, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddInstantAttackEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.InstantAttackEvent, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent GetInstantAttackEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.InstantAttackEvent);
public static System.Boolean TryGetInstantAttackEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.InstantAttackEvent, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddInstanShootingDirections(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Gameplay.Features.AttackFeature.InstantShootingDirectionArgs value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.InstanShootingDirections, value);
public static Assets.CourseGame.Develop.Gameplay.Features.AttackFeature.InstantShootingDirectionArgs GetInstanShootingDirections(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Gameplay.Features.AttackFeature.InstantShootingDirectionArgs>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.InstanShootingDirections);
public static System.Boolean TryGetInstanShootingDirections(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Gameplay.Features.AttackFeature.InstantShootingDirectionArgs value) => entity.TryGetValue<Assets.CourseGame.Develop.Gameplay.Features.AttackFeature.InstantShootingDirectionArgs>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.InstanShootingDirections, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIntervalBetweenAttacks(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IntervalBetweenAttacks, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIntervalBetweenAttacks(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IntervalBetweenAttacks, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetIntervalBetweenAttacks(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IntervalBetweenAttacks);
public static System.Boolean TryGetIntervalBetweenAttacks(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IntervalBetweenAttacks, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddAttackCooldown(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCooldown, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddAttackCooldown(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCooldown, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetAttackCooldown(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCooldown);
public static System.Boolean TryGetAttackCooldown(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AttackCooldown, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Damage, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Damage, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Damage);
public static System.Boolean TryGetDamage(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Damage, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddDetectedEntitiesBuffer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DetectedEntitiesBuffer, new System.Collections.Generic.List<Assets.CourseGame.Develop.Gameplay.Entities.Entity>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddDetectedEntitiesBuffer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, System.Collections.Generic.List<Assets.CourseGame.Develop.Gameplay.Entities.Entity> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DetectedEntitiesBuffer, value);
public static System.Collections.Generic.List<Assets.CourseGame.Develop.Gameplay.Entities.Entity> GetDetectedEntitiesBuffer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<System.Collections.Generic.List<Assets.CourseGame.Develop.Gameplay.Entities.Entity>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DetectedEntitiesBuffer);
public static System.Boolean TryGetDetectedEntitiesBuffer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out System.Collections.Generic.List<Assets.CourseGame.Develop.Gameplay.Entities.Entity> value) => entity.TryGetValue<System.Collections.Generic.List<Assets.CourseGame.Develop.Gameplay.Entities.Entity>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DetectedEntitiesBuffer, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Health, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Health, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Health);
public static System.Boolean TryGetHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Health, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMaxHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MaxHealth, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddMaxHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MaxHealth, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetMaxHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MaxHealth);
public static System.Boolean TryGetMaxHealth(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.MaxHealth, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageRequest(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageRequest(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> GetTakeDamageRequest(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest);
public static System.Boolean TryGetTakeDamageRequest(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> GetTakeDamageEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent);
public static System.Boolean TryGetTakeDamageEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTakeDamageCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetTakeDamageCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageCondition);
public static System.Boolean TryGetTakeDamageCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.TakeDamageCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsDead(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDead, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsDead(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDead, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsDead(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDead);
public static System.Boolean TryGetIsDead(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDead, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsDeathProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsDeathProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsDeathProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess);
public static System.Boolean TryGetIsDeathProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddDeathCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DeathCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetDeathCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DeathCondition);
public static System.Boolean TryGetDeathCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DeathCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddSelfDestroyCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfDestroyCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetSelfDestroyCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfDestroyCondition);
public static System.Boolean TryGetSelfDestroyCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.SelfDestroyCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTeam(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Team, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTeam(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Team, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> GetTeam(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Team);
public static System.Boolean TryGetTeam(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Team, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsMainHero(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMainHero, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsMainHero(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMainHero, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsMainHero(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMainHero);
public static System.Boolean TryGetIsMainHero(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsMainHero, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddAbilityList(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AbilityList, new Assets.CourseGame.Develop.Gameplay.Features.AbilitiesFeature.AbilityList());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddAbilityList(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Gameplay.Features.AbilitiesFeature.AbilityList value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AbilityList, value);
public static Assets.CourseGame.Develop.Gameplay.Features.AbilitiesFeature.AbilityList GetAbilityList(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Gameplay.Features.AbilitiesFeature.AbilityList>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AbilityList);
public static System.Boolean TryGetAbilityList(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Gameplay.Features.AbilitiesFeature.AbilityList value) => entity.TryGetValue<Assets.CourseGame.Develop.Gameplay.Features.AbilitiesFeature.AbilityList>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.AbilityList, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddBaseStats(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BaseStats, new System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddBaseStats(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BaseStats, value);
public static System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single> GetBaseStats(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BaseStats);
public static System.Boolean TryGetBaseStats(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single> value) => entity.TryGetValue<System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BaseStats, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddModifiedStats(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.ModifiedStats, new System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddModifiedStats(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.ModifiedStats, value);
public static System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single> GetModifiedStats(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.ModifiedStats);
public static System.Boolean TryGetModifiedStats(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single> value) => entity.TryGetValue<System.Collections.Generic.Dictionary<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatTypes,System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.ModifiedStats, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddStatsEffectsList(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.StatsEffectsList, new Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatsEffectsList());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddStatsEffectsList(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatsEffectsList value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.StatsEffectsList, value);
public static Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatsEffectsList GetStatsEffectsList(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatsEffectsList>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.StatsEffectsList);
public static System.Boolean TryGetStatsEffectsList(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatsEffectsList value) => entity.TryGetValue<Assets.CourseGame.Develop.Gameplay.Features.StatsFeature.StatsEffectsList>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.StatsEffectsList, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddLevel(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Level, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddLevel(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Level, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> GetLevel(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Level);
public static System.Boolean TryGetLevel(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Level, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddExperience(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Experience, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddExperience(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Experience, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetExperience(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Experience);
public static System.Boolean TryGetExperience(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Experience, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddOwner(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Gameplay.Entities.Entity value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Owner, value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity GetOwner(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Gameplay.Entities.Entity>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Owner);
public static System.Boolean TryGetOwner(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Gameplay.Entities.Entity value) => entity.TryGetValue<Assets.CourseGame.Develop.Gameplay.Entities.Entity>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Owner, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsProjectile(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, System.Boolean value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsProjectile, value);
public static System.Boolean GetIsProjectile(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<System.Boolean>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsProjectile);
public static System.Boolean TryGetIsProjectile(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out System.Boolean value) => entity.TryGetValue<System.Boolean>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsProjectile, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddDeathLayer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.LayerMask value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DeathLayer, value);
public static UnityEngine.LayerMask GetDeathLayer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.LayerMask>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DeathLayer);
public static System.Boolean TryGetDeathLayer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.LayerMask value) => entity.TryGetValue<UnityEngine.LayerMask>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DeathLayer, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsTouchDeathLayer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsTouchDeathLayer, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsTouchDeathLayer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsTouchDeathLayer, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsTouchDeathLayer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsTouchDeathLayer);
public static System.Boolean TryGetIsTouchDeathLayer(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsTouchDeathLayer, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsTouchAnotherTeam(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsTouchAnotherTeam, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsTouchAnotherTeam(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsTouchAnotherTeam, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsTouchAnotherTeam(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsTouchAnotherTeam);
public static System.Boolean TryGetIsTouchAnotherTeam(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsTouchAnotherTeam, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddBounceCount(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BounceCount, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddBounceCount(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BounceCount, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> GetBounceCount(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BounceCount);
public static System.Boolean TryGetBounceCount(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BounceCount, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddBounceEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BounceEvent, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<UnityEngine.RaycastHit>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddBounceEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<UnityEngine.RaycastHit> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BounceEvent, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<UnityEngine.RaycastHit> GetBounceEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<UnityEngine.RaycastHit>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BounceEvent);
public static System.Boolean TryGetBounceEvent(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<UnityEngine.RaycastHit> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveEvent<UnityEngine.RaycastHit>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.BounceEvent, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddLayerToBounceReaction(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.LayerMask value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.LayerToBounceReaction, value);
public static UnityEngine.LayerMask GetLayerToBounceReaction(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.LayerMask>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.LayerToBounceReaction);
public static System.Boolean TryGetLayerToBounceReaction(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.LayerMask value) => entity.TryGetValue<UnityEngine.LayerMask>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.LayerToBounceReaction, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsSpawningProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsSpawningProcess, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsSpawningProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsSpawningProcess, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsSpawningProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsSpawningProcess);
public static System.Boolean TryGetIsSpawningProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsSpawningProcess, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTarget(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Target, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<Assets.CourseGame.Develop.Gameplay.Entities.Entity>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddTarget(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<Assets.CourseGame.Develop.Gameplay.Entities.Entity> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Target, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<Assets.CourseGame.Develop.Gameplay.Entities.Entity> GetTarget(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<Assets.CourseGame.Develop.Gameplay.Entities.Entity>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Target);
public static System.Boolean TryGetTarget(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<Assets.CourseGame.Develop.Gameplay.Entities.Entity> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<Assets.CourseGame.Develop.Gameplay.Entities.Entity>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Target, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsPullable(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsPullable, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsPullable(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsPullable, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsPullable(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsPullable);
public static System.Boolean TryGetIsPullable(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsPullable, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsPullingProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsPullingProcess, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsPullingProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsPullingProcess, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsPullingProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsPullingProcess);
public static System.Boolean TryGetIsPullingProcess(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsPullingProcess, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsCollected(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsCollected, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddIsCollected(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsCollected, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsCollected(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsCollected);
public static System.Boolean TryGetIsCollected(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.IsCollected, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddCoins(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Coins, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddCoins(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Coins, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> GetCoins(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Coins);
public static System.Boolean TryGetCoins(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Int32>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.Coins, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddDropLootCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DropLootCondition, value);
public static Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition GetDropLootCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DropLootCondition);
public static System.Boolean TryGetDropLootCondition(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Conditions.ICompositeCondition>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.DropLootCondition, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddLootIsDropped(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.LootIsDropped, new Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddLootIsDropped(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.LootIsDropped, value);
public static Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetLootIsDropped(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.LootIsDropped);
public static System.Boolean TryGetLootIsDropped(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<Assets.CourseGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.LootIsDropped, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddHealthBarPoint(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.Transform value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.HealthBarPoint, value);
public static UnityEngine.Transform GetHealthBarPoint(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.HealthBarPoint);
public static System.Boolean TryGetHealthBarPoint(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.Transform value) => entity.TryGetValue<UnityEngine.Transform>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.HealthBarPoint, out value);
public static Assets.CourseGame.Develop.Gameplay.Entities.Entity AddCollidersDisabledOnDeath(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, System.Collections.Generic.IEnumerable<UnityEngine.Collider> value) => entity.AddValue(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CollidersDisabledOnDeath, value);
public static System.Collections.Generic.IEnumerable<UnityEngine.Collider> GetCollidersDisabledOnDeath(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<System.Collections.Generic.IEnumerable<UnityEngine.Collider>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CollidersDisabledOnDeath);
public static System.Boolean TryGetCollidersDisabledOnDeath(this Assets.CourseGame.Develop.Gameplay.Entities.Entity entity, out System.Collections.Generic.IEnumerable<UnityEngine.Collider> value) => entity.TryGetValue<System.Collections.Generic.IEnumerable<UnityEngine.Collider>>(Assets.CourseGame.Develop.Gameplay.Entities.EntityValues.CollidersDisabledOnDeath, out value);
}
